#include <bits/stdc++.h>
using namespace std;
#define hashmap unordered_map<char,node*>

class node{
    public:
        char data;
        hashmap h;
        bool isTerminal;
        
        node(char d){
            data = d;
            isTerminal = false;
        }
};


class Trie{
    node *root;
    public:
        Trie(){
            root = new node('\0');
        }
        
        void addWord(string word){
            node *temp = root;
            for(int i=0; i<word.length(); i++){
                char ch = word[i];
                if(temp->h.count(ch) == 0){
                    node *child = new node(ch);
                    temp->h[ch] = child;
                    temp =child;
                }
                else
                    temp = temp->h[ch];
            }
            
            temp->isTerminal = true;
        }
        
        bool search(string word){
            node *temp = root;
            for(int i=0; i<word.length(); i++){
                char ch = word[i];
                if(temp->h.count(ch))
                    temp = temp->h[ch];
                else
                    return false;
            }
            return temp->isTerminal;
        }
};

int main() {
	//code
	int t;
	cin>>t;
	
	while(t--){
	    int n;
	    cin>>n;
	    
	    string str[n];
	    for(int i=0; i<n; i++)
	        cin>>str[i];
	        
	    string word;
	    cin>>word;
	    
	    Trie root;
	    for(int i=0; i<n; i++)
	        root.addWord(str[i]);
	        
	    cout<<root.search(word)<<endl;     
	    
	}
	return 0;
}
