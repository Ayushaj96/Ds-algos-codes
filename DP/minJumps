#include <bits/stdc++.h>
using namespace std;
#define ll long long int
ll minJumps(ll *arr, ll n){
    
    if(n == 0 || arr[0] == 0)
        return -1;
    
    ll dp[n];
    for(ll i = 0; i < n; i++)
        dp[i] = -1;
    dp[n-1] = 0;
    for(int i = n-2; i >= 0; i--){
        if(arr[i] > 0){
            ll minval = LONG_MAX;
            for(ll j = 1; j <= arr[i]; j++){ // check for each jump possible
                if(i + j < n && dp[i+j] != -1)
                    minval = min(minval,dp[i+j]);
            }      
        if(minval != LONG_MAX)
            dp[i] = minval + 1;
        else 
            dp[i] = LONG_MAX;
        }
       
    }
   
    return dp[0] == LONG_MAX ? -1 : dp[0];
}

int main() {
	//code
	int T;
	cin>>T;
	
	while(T--){
	    ll n;
	    cin>>n;
	    
	    ll arr[n];
	    for(ll i = 0; i < n; i++)
	        cin>>arr[i];
	   
	    cout<<minJumps(arr,n)<<endl;     
	}
	return 0;
}

// recursive

#include <bits/stdc++.h>
using namespace std;

int minJumps(int *arr, int n, int idx){
    if(idx == n)
        return 0;
    if(arr[idx] == 0)
        return INT_MAX;
    
    int res = INT_MAX;
    for(int i = 1; i <= arr[idx]; i++){
        if(i + idx <= n){
            int sub_res = minJumps(arr,n, i + idx);
            if(sub_res != INT_MAX)
                res  = min(res, sub_res+1);
        }
    }
    return res;
}
int main() {
	//code
	int T;
	cin>>T;
	
	while(T--){
	    int n;
	    cin>>n;
	    
	    int arr[n];
	    for(int i = 0; i < n; i++)
	        cin>>arr[i];
	   
	    int jumps = minJumps(arr,n,0);     
	    if(jumps == INT_MAX)
	        cout<<0;
	    else
	        cout<<jumps;
	        
	    cout<<endl;     
	}
	return 0;
}

