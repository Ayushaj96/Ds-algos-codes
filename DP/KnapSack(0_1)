#include <iostream>
#include <cstring>
using namespace std;

static int dp[1001][1001];

int knapSackRecursive(int *val, int *wt, int W, int n){
    if(n == 0 || W == 0)
        return 0;
    int val1 = 0;    
    if(wt[n] <= W)
        int val1 = val[n] + knapSackRecursive(val,wt,W - wt[n], n - 1);
    int val2 = knapSackRecursive(val,wt,W,n-1);
    return max(val1,val2);
}

int knapSackMemoised(int *val, int *wt, int W, int n){
    if(n < 0 || W <= 0)
        return 0;
        
    if(dp[n][W] != -1)
        return dp[n][W];
        
    int val1 = 0;		
    if(wt[n] <= W)
        val1 = val[n] + knapSackMemoised(val,wt,W - wt[n], n - 1);
        
    int val2 = knapSackMemoised(val,wt,W,n-1);
	dp[n][W] = max(val1,val2);
	
	return dp[n][W];
}

int knapSackTabulation(int *val, int *wt, int W,int n){
    int dp[n+1][W+1];
    
    for(int  i = 0; i <= W; i++){
        dp[0][i] = 0;
    }
    for(int  i = 0; i <= n; i++){
        dp[i][0] = 0;
    }
    
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= W; j++){
            if(wt[i-1] <= j){
                dp[i][j] = max(val[i-1] + dp[i-1][j - wt[i-1]], dp[i-1][j]);
            }
            else
                dp[i][j] = dp[i-1][j];
        }
    }

    // for(int  i = 0; i <= n; i++){
    //     for(int  j = 0; j <= W; j++)
    //         cout<< dp[i][j]<<" ";
    //     cout<<endl;    
    // }
    return dp[n][W];
}

int main() {
	//code
	int T;
	cin>>T;
	
	while(T--){
	    int n,W;
	    cin>>n>>W;
	    
	    int val[n], wt[n];
	    for(int i = 0; i < n; i++)
	        cin>>val[i];
	    for(int i = 0; i < n; i++)
	        cin>>wt[i];
	   
	    memset(dp,-1,sizeof(dp));
	    cout<<knapSackTabulation(val,wt,W,n)<<endl;     
	}
	return 0;
}
