#include <iostream>
#include <cstring>
#include <vector>
using namespace std;

//recursive + memoised
int LCS(string str1, string str2, int n, int m, vector<vector<int>> &dp){
    
    if(n == str1.length() || m == str2.length())
        return 0;
    
    if(dp[n][m] != -1)
        return dp[n][m];
    
    if(str1[n] == str2[m]){
        dp[n][m] =  1+LCS(str1,str2,n+1,m+1,dp);
        return dp[n][m];
    }

    int val1 = LCS(str1,str2,n+1,m,dp);
    int val2 = LCS(str1,str2,n,m+1,dp);
    
    dp[n][m] = max(val1,val2);
    return dp[n][m];
    
}

int main() {
	//code
	int T;
	cin>>T;
	
	while(T--){
	    int n,m;
	    cin>>n>>m;
	    
	    string str1, str2;
	    cin>>str1>>str2;
	    
	    vector<vector<int>> dp(n+1, vector<int> (m+1,-1));
	    cout<<LCS(str1,str2,0,0,dp)<<endl;
	}
	return 0;
}
