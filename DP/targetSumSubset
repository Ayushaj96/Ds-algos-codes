#include <bits/stdc++.h>
using namespace std;


bool targetSumSubset(int *arr, int n, int idx, int sum,vector<vector<int>> &dp){
    
    if(sum == 0)
        return true;
    if(idx == n){
        if(sum == 0)
            return true;
        else 
            return false;
    }
    
    
    if(dp[idx][sum] != -1)
        return dp[idx][sum] == 1 ? true : false;
    
    bool val = false;
    if(arr[idx] <= sum)
        val = targetSumSubset(arr,n,idx+1,sum - arr[idx],dp);
    
    bool val2 = targetSumSubset(arr,n,idx+1,sum,dp);
    if(val || val2)
        dp[idx][sum] = 1;
    else
        dp[idx][sum] = 0;
    
    return dp[idx][sum] == 1 ? true : false;
}

bool _targetSumSubset(int *arr, int n, int sum){
    bool dp[n+1][sum+1];
    
    for(int i = 0; i <= sum; i++)
        dp[0][i] = false;
    for(int i = 0; i <= n; i++)
        dp[i][0] = true;
        
        
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= sum; j++){
            if(arr[i-1] <= j)
                dp[i][j] = dp[i-1][j] || dp[i-1][j - arr[i-1]];
            else
                dp[i][j] = dp[i-1][j];
        }
    }
    return dp[n][sum];    
}

int main() {
	// your code goes here
	int n;
	cin>>n;
	
	int arr[n];
	for(int i = 0; i < n; i++)
	    cin>>arr[i];
	int sum;
	cin>>sum;
	
	vector<vector<int> > dp(n+1 , vector<int> (sum+1,-1));  
	bool checkSumset = _targetSumSubset(arr,n,sum);
	if(checkSumset)
	    cout<<"TRUE";
	else
	    cout<<"FALSE";
	
	
	return 0;
}
