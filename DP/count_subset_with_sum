#include <iostream>
using namespace std;
#define mod 1000000007
void subsetsWithSumX(int arr[], int n, int idx, int X, int &count){
    if(idx == n){
        if(X == 0)
            count++;
        return;    
    }
    if(X == 0){
        count++;
        return;
    }
    
    if(arr[idx] <= X)
        subsetsWithSumX(arr,n,idx+1,X-arr[idx],count);
     subsetsWithSumX(arr,n,idx+1,X,count);    
        
}

int countSubsetWithSumX(int arr[], int n, int X){
    int dp[n+1][X+1];
    for(int i = 0; i <= X; i++)
        dp[0][i] = 0;
    for(int i = 0; i <= n; i++)
        dp[i][0] = 1;
        
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= X; j++){
            if(arr[i-1] <= j)
                dp[i][j] = (dp[i-1][j])%mod + (dp[i-1][j - arr[i-1]])%mod;
            else
                dp[i][j] = (dp[i-1][j])%mod;
        }
    }    
    return dp[n][X]%mod;
}

int main() {
	// your code goes here
	int T;
	cin>>T;
	
	while(T--){
	int n;
	cin>>n;
	
	int arr[n];
	for(int i = 0; i < n; i++)
	    cin>>arr[i];

	int x;
	cin>>x;

	cout<<countSubsetWithSumX(arr,n,x)<<endl;;
	}
	return 0;
}
