#include <iostream>
#include <cstring>
using namespace std;

int unboundedKnapsack(int *val, int *wt, int N, int W){
    int dp[N+1][W+1];
    memset(dp,0,sizeof(dp));
    for(int i = 1; i <= N; i++){
        for(int j = 1; j <= W; j++){
            if(wt[i-1] <= j)
                dp[i][j] = max(dp[i-1][j],val[i-1] + dp[i][j - wt[i-1]]); // use cur element again or do not use cur element again
            else
                dp[i][j] = dp[i-1][j];
        }
    }
    return dp[N][W];
}
// using 1d array
int unboundedKnapsack(int *val, int *wt, int N, int W){
    int dp[W+1];
    memset(dp,0,sizeof(dp));
    for(int cap = 1; cap <= W; cap++){
        int maxval = 0;
        for(int i = 0; i < N; i++){
            if(wt[i] <= cap){
                int rcap = cap - wt[i];
                int curval = val[i] + dp[rcap];
                
                maxval = max(maxval,curval);
            }
        }
        dp[cap] = maxval;
    }
    return dp[W];
}

int main() {
	//code
	int T;
	cin>>T;
	
	while(T--){
	    int N,W;
	    cin>>N>>W;
	    
	    int val[N],wt[N];
	    for(int i = 0; i < N; i++)
	        cin>>val[i];
	    for(int i = 0; i < N; i++)
	        cin>>wt[i];
	        
	    cout<<unboundedKnapsack(val,wt,N,W)<<endl;     
	}
	return 0;
}
