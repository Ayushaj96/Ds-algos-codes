#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

int coinChange(int *arr, int n ,int K){
    int dp[K+1];
    memset(dp,0,sizeof(dp));
    dp[0] = 1;
    
    for(int j = 0; j < n; j++){
        int comb = 0;
        for(int i = 1; i <= K; i++){
            if(arr[j] <= i){
                int remAmount = i - arr[j];
                dp[i] += dp[remAmount];
            }
        }
    }
    return dp[K];
}

int coinChangeTabulation(int *arr, int n ,int K){
    int dp[n+1][K+1];
    memset(dp,0,sizeof(dp));
    for(int i = 1; i <= n; i++)
        dp[i][0] = 1;
    
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= K; j++){
            if(arr[i - 1] <= j){
                dp[i][j] = dp[i-1][j] + dp[i][j - arr[i-1]];
            }
            else
                dp[i][j] = dp[i-1][j];
        }
    }
    return dp[n][K];
}

int coinChangeMemoised(int *arr, int n, int i, int K,vector<vector<int>> &dp){
    if(K < 0)
        return 0;
    if(K == 0)
    	return 1;
    if(i == n){
        if(K == 0)
            return 1;
        return 0;    
    }    
    if(dp[i][K] != -1)
        return dp[i][K];
    int val1 = 0;
    if(arr[i] <= K)
        val1 = coinChangeMemoised(arr,n,i,K-arr[i],dp);
    
    int val2 = coinChangeMemoised(arr,n,i+1,K,dp);
    dp[i][K] = val1 + val2;
    
    return dp[i][K];
}



int main() {
	//code
	int T;
	cin>>T;
	
	while(T--){
	    int n;
	    cin>>n;
	    
	    int arr[n];
	    for(int i = 0; i < n; i++)
	        cin>>arr[i];
	    int K;
	    cin>>K;
	    
	    vector<vector<int>> v(n+1,vector<int> (K+1,-1));
	    cout<<coinChangeTabulation(arr,n,K)<<endl;
	}
	return 0;
}
