class Solution {
public:
    int _wordBreak(string str, unordered_set<string> s, vector<int> &dp){
    if(str.length() == 0){
        return 1;
    }
    
    int n = str.size();
    if(dp[n] == -1){
        dp[n] = 0;
    
        for(int i = 0; i < str.length(); i++){
            string left = str.substr(0,i+1);
            if(s.find(left) != s.end()){
                string right = str.substr(i+1);
                if(_wordBreak(right,s,dp)){
                    dp[n] = 1;
                    return dp[n];
                }
            }        
        }
    }
    return dp[n];
}
    
    bool wordBreak(string s, vector<string>& wordDict) {
       
        unordered_set<string> st;
	    for(int i = 0; i < wordDict.size(); i++){
	        st.insert(wordDict[i]);
	    }
	    
	    int n = s.length();
	    vector<int> dp(n+1,-1);
        
	    return _wordBreak(s,st,dp);
    }
};
