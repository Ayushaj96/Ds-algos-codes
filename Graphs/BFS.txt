#include<iostream>
#include<map>
#include<list>
#include<queue>
using namespace std;

template<typename T>
class Graph{
		
	map<T,list<T> > adjList;
	
	public:
		Graph(){
		}
		
		void addEdge(T u,T v,bool bidir=true)
		{
			adjList[u].push_back(v);
			if(bidir)
					adjList[v].push_back(u);

		}
		
		
		void print()
		{
			for(auto a:adjList)
			{
				cout<<a.first<<"->";
				
				for(auto j:a.second)
				{
					cout<<j<<",";
				}
			cout<<endl;		
			}
		}

        void bfs(T s)
        {
            queue<T> q;
            map<T,bool> visited;

            q.push(s);
            visited[s]=true;

            while(!q.empty())
            {
                T node =q.front();
                cout<<node<<" ,";
                q.pop();

                for(T n:adjList[node])
                {
                        if(!visited[n])
                        {
                            q.push(n);
                            visited[n]=true;
                        }
                }
            }

        }
};

int main()
{
	
	Graph<int> g2;
	g2.addEdge(0,1);
	g2.addEdge(1,2);
	g2.addEdge(0,4);
    g2.addEdge(2,4);
    g2.addEdge(2,3);
    g2.addEdge(3,5);
    g2.addEdge(3,4);
	
    g2.bfs(0);
}