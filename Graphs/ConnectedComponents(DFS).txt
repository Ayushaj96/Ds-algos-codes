#include <bits/stdc++.h>
using namespace std;

template <typename T>
class Graph{

    map<T,list<T> > adjList;

    public:

    void addEdge(T u,T v,bool bidir=true)
    {
        adjList[u].push_back(v);
        if(bidir)
            adjList[v].push_back(u);
    }
    void dfshelper(T node,map<T,bool> &visited)
    {
        visited[node]=true;
        cout<<node<<" ";
        for(T neighbor: adjList[node])
        {
            if(!visited[neighbor])
                dfshelper(neighbor,visited);
        }
    }

void dfs(T src){
        map<T,bool>visited;

        int comp=1;
        dfshelper(src,visited);
        cout<<endl;

        for(auto i:adjList)
        {
            T city=i.first;
            if(!visited[city])
            {
                dfshelper(city,visited);
                comp++;
                cout<<endl;
            }
        }

        cout<<"Graph has "<<comp<<" components";
    }

};

int main() {
     Graph<string> g;
      g.addEdge("Amritsar","Jaipur");
      g.addEdge("Amritsar","Delhi");
      g.addEdge("Delhi","Jaipur");
      g.addEdge("Mumbai","Jaipur");
      g.addEdge("Mumbai","Bhopal");
       g.addEdge("Delhi","Bhopal");
       g.addEdge("Mumbai","Bangalore");
       g.addEdge("Agra","Delhi");
       g.addEdge("Andaman","Nicobar");

       g.dfs("Amritsar");

      
      
    
}
