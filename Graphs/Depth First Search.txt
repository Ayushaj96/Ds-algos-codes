#include <iostream>
#include <map>
#include <list>
using namespace std;

template<typename T>
class Graph{
    map<T,list<T> > adjlist;
    public :
    Graph(){}

    void addEdge(T u,T v, bool bidir=true){
        adjlist[u].push_back(v);
        if(bidir){
           adjlist[v].push_back(u); 
        }
    }

    void dfshelper(T node,map<T,bool> &visited){
          visited[node] = true;
          cout<<node<<" ";
          for(T neighbour : adjlist[node]){
              if(!visited[neighbour]){
                 dfshelper(neighbour,visited);
              }
          }
    }

    void dfs(T src){
        map<T,bool>visited;
        dfshelper(src,visited);
    }
};

int main() {
    Graph<int> g;
    g.addEdge(0,1);
    g.addEdge(1,2);
    g.addEdge(0,4);
    g.addEdge(2,4);
    g.addEdge(2,3);
    g.addEdge(3,5);
    g.addEdge(3,4);
    g.dfs(0);
}
