#include <bits/stdc++.h>
using namespace std;

template<typename T>
class Graph{

    map<T,list<T>> adjList;

    public:
    Graph(){}

    void addEdge(T u,T v,bool bidirec=true){

        adjList[u].push_back(v);
        if(bidirec)
            adjList[v].push_back(u);
    }

    int bfs(T src,T dest)
    {
        map<T,int> dist; 
        queue<T> q;
        map<T,T> parent;

        for(auto i : adjList){
            dist[i.first] = INT_MAX;
        }

        q.push(src);
        dist[src] = 0;
        parent[src] = 0;
        
        while(!q.empty()){
           T node = q.front();
           q.pop();

           for(auto neighbour : adjList[node]){
               if(dist[neighbour]==INT_MAX){
                   q.push(neighbour);
                   dist[neighbour] = dist[node] + 1; 
                   parent[neighbour] = node;
               }
           }
        }

        //Print destination and then go backwards
        T temp = dest;
        while(temp!=src){
            cout<<temp<<" <- ";
            temp = parent[temp];
        }
        cout<<src<<endl;
        return dist[dest];
    }
};

int main() {
     Graph<int> g;
     
    int board[50] = {0};
    board[2] = 13;
    board[5] = 2;
    board[9] = 18;
    board[18] = 11;
    board[17] = -13;
    board[20] = -14;
    board[24] = -8;
    board[25] = -10;
    board[32] = -2;
    board[34] = -22;

    for(int u=0;u<=36;u++)
    {
        for(int dice=1;dice<=6;dice++)
        {
            int v=u+dice+board[u+dice];
            g.addEdge(u,v,false);
        }
    }

    cout<<"The Shortest distance is: "<<g.bfs(0,36);
}
