#include <iostream>
#include <map>
#include <list>
#include <queue>
#include <climits>
using namespace std;

template<typename T>
class Graph{
    map<T,list<T> > adjList;

    public:
     Graph(){}

     void addEdge(T u,T v,bool bidir=true){
         adjList[u].push_back(v);
         if(bidir){
             adjList[v].push_back(u);
         }
     }

     void bfs(int src){
         queue<int> q;
         map<T,int> dist;

         for(auto i:adjList){
             dist[i.first]=INT_MAX;
         }

         q.push(src);
         dist[src] = 0; // source

         while(!q.empty()){
             T node = q.front();
             q.pop();

             //for the neighbours of current node, find out which are not visited
             for(int neighbour : adjList[node]){
                 if(dist[neighbour]==INT_MAX){
                     q.push(neighbour);
                     dist[neighbour] = dist[node] + 1;
                 }
             }
         }

         for(auto i:adjList){
             T node = i.first;
             cout<<"\nDist of "<<node<<" from "<<src<<" is "<<dist[node];
         }
     }
};
int main() {
    Graph<int> g;
    g.addEdge(0,1);
    g.addEdge(1,2);
    g.addEdge(0,4);
    g.addEdge(2,4);
    g.addEdge(2,3);
    g.addEdge(3,5);
    g.addEdge(3,4);
    g.bfs(0);

    return 0;
}
