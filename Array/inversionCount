#include <iostream>
using namespace std;
#define ll long long int

ll merge(ll arr[], ll temp[], ll left, ll right,ll mid){
 
    ll i = left, j = mid;
    ll k = left;
    ll inv_count = 0;
    
    while((i <= mid - 1) && (j <= right)){
        if(arr[i] <= arr[j]){
            temp[k++] = arr[i++];
        }
        else{
            temp[k++] = arr[j++];
            inv_count += (mid - i);
        }
    }
    
    while(i <= mid - 1){
        temp[k++] = arr[i++];
    }
    while(j <= right){
        temp[k++] = arr[j++];
    }
    
    for(ll i = left; i <= right; i++)
        arr[i] = temp[i];
    
    return inv_count;
    
} 

ll mergeSort(ll arr[], ll temp[], ll left, ll right){
    ll inv_count = 0;
    
    if(right > left){
        ll mid = left + (right - left)/2;
        
        inv_count += mergeSort(arr,temp,left,mid);
        inv_count += mergeSort(arr,temp,mid+1,right);
        
        inv_count += merge(arr,temp,left,right,mid+1);
    }
    
    return inv_count;
}


ll inversionCount(ll arr[], ll n){
    
    ll temp[n + 1];
    
    return mergeSort(arr,temp,0,n - 1);
}


int main() {
	//code
	int T;
	cin>>T;
	
	while(T--){
	    ll n;
	    cin>>n;
	    
	    ll arr[n];
	    for(ll i = 0; i < n; i++)
	        cin>>arr[i];
	   
	   cout<<inversionCount(arr,n)<<endl;  
	}
	return 0;
}
