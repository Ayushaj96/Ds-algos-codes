
int merge(vector<int> &A, int s, int m, int e){
    
    int i = s, j = m+1, k = 0, inv_count = 0;
    int size = e-s+1;
    vector<int> temp(size,0);
    
    while(i <= m && j <=e){
        if(A[i] <= A[j])
            temp[k++] = A[i++];
        else{
            temp[k++] = A[j++];
            inv_count += (m-i+1);
        }
    }
    
    while(i <= m)
        temp[k++] = A[i++];
    while(j <= e)
         temp[k++] = A[j++];
         
    for(k = s; k <= e; k++)
        A[k] = temp[k-s];
    
    return inv_count;     
}


int inversions(vector<int> &A, int s, int e){
    int inv_count = 0;
    
    if(s < e){
        int m = s + (e-s)/2;
        inv_count += inversions(A,s,m);
        inv_count += inversions(A,m+1,e);
        
        inv_count += merge(A,s,m,e);
    }
    
    return inv_count;
}

int Solution::countInversions(vector<int> &A) {
    
    int n = A.size();
    int count = inversions(A,0,n-1);
    
    return count;
}
