#include<iostream>
using namespace std;

class node{
    public:
    int data;
    node*next;
    node(int d)
    {
        data=d;
        next=NULL;
    }
};
void insertatend(node*&head,int data)
{
    if(head==NULL)
    {
        head=new node(data);
        return;
    }
    else
    {
        node*tail=head;
        while(tail->next!=NULL)
        {
            tail=tail->next;
        }
        tail->next=new node(data);
    }
}

void inputuser(node*&head,int n)
{
    int k=0;
    int d;
    while(k<n)
    {
        cin>>d;
        insertatend(head,d);
        k++;
    }
}

void print(node*head)
{
    while(head)
    {
        cout<<head->data<<" ";
        head=head->next;
    }
    cout<<endl;
}

node*reverse2(node*head)
{
        node*p=NULL;
        node*c=head;
        node*n;
        while(c!=NULL)
        {
            n=c->next;
            c->next=p;
            p=c;
            c=n;
        }
        head=p;
        return p;
}

node*reverseK(node*head,int k,int n)
{
    if(k>n)
    {
        node*head1=reverse2(head);
        return head1;
    }
    else if(n==0)
    {
        return head;
    }
    else
    {
        node*p=NULL;
        node*c=head;
        node*b=head;
        node*a;
        int jump=1;
        while(jump<=k)
        {
            a=c->next;
            c->next=p;
            p=c;
            c=a;
            jump++;
        }
        head=p;
        node*shead=reverseK(c,k,n-k);
        b->next=shead;
        return head;
    }
}

int main()
{
    int t;
    cin>>t;
    for(int i=0;i<t;i++)
    {
        node*head=NULL;
    int n;
    cin>>n;
    inputuser(head,n);
    int k;
    cin>>k;
    node*head1=reverseK(head,k,n);
    print(head1);
    }
    
   
}