// extra space solution

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head == NULL)    return NULL;
        
        unordered_map<Node*,Node*> m;
        Node *cur = head;
        while(cur){
            m[cur] = new Node(cur->val);
            cur = cur->next;
        }
        
        cur = head;
        while(cur){
            m[cur]->next = m[cur->next];
            m[cur]->random = m[cur->random];
            cur = cur->next;
        }
        return m[head];
    }
};


// O(1) solution
class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head == NULL) return head;
        
        Node *cur = head, *aux = NULL;
        while(cur){
            aux = cur->next;
            Node *n = new Node(cur->val);
            cur->next = n;
            n->next = aux;
            cur = aux;
        }
        
        cur = head;
        while(cur){
            cur->next->random = cur->random == NULL ? NULL: cur->random->next;
            cur = cur->next->next;
        }
        
        aux = head->next;
        Node *copy = aux;
        Node *original = head;
        while(original && copy){
            original->next = original->next ? original->next->next : original->next;
            copy->next = (copy->next) ? copy->next->next : copy->next;
            original = original->next;
            copy = copy->next;
        }
        return aux;
    }
};
