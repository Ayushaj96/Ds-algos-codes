bool nodeToRoot(Node *root, int k, vector<Node*> &v){
    if(root == NULL)
        return false;
    if(root->data == k){
        v.push_back(root);
        return true;
    }   
    bool lc = nodeToRoot(root->left,k,v);
    if(lc){
        v.push_back(root);
        return true;
    }
    bool rc = nodeToRoot(root->right,k,v);
    if(rc){
        v.push_back(root);
        return true;
    }
    
    return false;
}

Node* lca(Node* root ,int n1 ,int n2 )
{
   //Your code here 
   if(root == NULL){
       return root;
   }
   
   vector<Node*> a,b;
   if(!nodeToRoot(root,n1,a))
        return root;
    
   if(!nodeToRoot(root,n2,b))
        return root;  
        
    int i = a.size() - 1;
    int j = b.size() - 1;
    Node *ans;
    while(i >= 0 && j >= 0){
        if(a[i]->data != b[j]->data) // uncommon found
            break;
        else
            ans = a[i]; // save common Node
        i--;
        j--;
    }
    
    return ans;
        
}
