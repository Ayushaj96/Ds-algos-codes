#include<iostream>
using namespace std;

class node
{
    public:
    int data;
    node*left;
    node*right;
    
    node(int d)
    {
        data=d;
        left=NULL;
        right=NULL;
    }
};

 
void buildtree(node *&root)
{
   	string a,b;
  int data;
  cin>>data;
  root=new node(data);

  cin>>a;
  if(a=="true"){
      buildtree(root->left);
  }
  
  cin>>b;
  if(b=="true"){
      buildtree(root->right);
  }

  if(a=="false" || b=="false"){
      return  ;
  }
    
}

 
void printArray(int ints[], int len,int a) 
{
  int i,sum=0;
  for (i=0; i<len; i++) 
  {
      sum+=ints[i];
  }
  if(sum==a)
  {
      for (i=0; i<len; i++) 
  {
      cout<<ints[i]<<" ";
  }
  cout<<endl;
  }
}

void printPathsRecur(node* root, int path[], int pathLen,int sum) 
{
    int a=sum;
  if (root==NULL) 
    return;
 
  path[pathLen] = root->data;
  pathLen++;
 
  if (root->left==NULL && root->right==NULL) 
  {
    printArray(path, pathLen,a);
  }
  else
  {
    printPathsRecur(root->left, path, pathLen,a);
    printPathsRecur(root->right, path, pathLen,a);
  }
}
 




int main() {
    int path[1000],n;
    node*root=NULL;
    buildtree(root);
    cin>>n;
    printPathsRecur(root,path,0,n);
    
    
    
	return 0;
}