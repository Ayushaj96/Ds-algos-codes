
void Leaves(Node* root, vector<int> &arr) 
{ 
    if (root == NULL) 
        return; 
  
    Leaves(root->left,arr); 
  
    if (!(root->left) && !(root->right)) 
        arr.push_back(root->data); 
  
    Leaves(root->right, arr); 
} 
  
void BoundaryLeft(Node* root, vector<int> &arr) 
{ 
    if (root == NULL) 
        return; 
  
    if (root->left) { 
        arr.push_back(root->data); 
        BoundaryLeft(root->left,arr); 
    } 
    else if (root->right) { 
        arr.push_back(root->data); 
        BoundaryLeft(root->right,arr); 
    } 
    // do nothing if it is a leaf node, this way we avoid 
    // duplicates in output 
} 

void BoundaryRight(Node* root, vector<int> &arr) 
{ 
    if (root == NULL) 
        return; 
  
    if (root->right) { 
        BoundaryRight(root->right,arr); 
        arr.push_back(root->data); 
    } 
    else if (root->left) { 
        BoundaryRight(root->left,arr); 
        arr.push_back(root->data); 
    } 
    // do nothing if it is a leaf node, this way we avoid 
    // duplicates in output 
} 

vector <int> printBoundary(Node *root)
{
     //Your code here
     vector<int> arr;
     if(root == NULL)
        return arr;
        
     arr.push_back(root->data);
     
     BoundaryLeft(root->left,arr);
     Leaves(root->left,arr);
     Leaves(root->right,arr);
     BoundaryRight(root->right,arr);
     
     return arr;
     
}
