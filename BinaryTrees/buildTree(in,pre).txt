#include <iostream>
using namespace std;

class Node
{
    public:
    int data;
    Node*left;
    Node*right;

    Node(int d)
    {
        data=d;
        left=right=NULL;
    }
};

Node* construct(int *pre, int psi, int pli, int *in, int isi, int ili){
    if(psi > pli || isi > ili)
        return NULL;
    
    Node *n = new Node(pre[psi]);
    
    int idx = -1;
    for(idx = isi; idx <= ili; idx++){
        if(pre[psi] == in[idx])
            break;
    }
    
    int nle = idx - isi;
    n->left = construct(pre,psi + 1, psi + nle, in, isi, idx - 1);
    n->right = construct(pre,psi + nle + 1,pli,in,idx + 1, ili);
}

Node* buildTree(int in[],int pre[], int n)
{
    //add code here.
    return construct(pre,0,n-1,in,0,n-1);
}
void  printpre(Node*root)
{
    if(root==NULL)
        return;

        cout<<root->data<<" ";
        printpre(root->left);
        printpre(root->right);
}

int main() {

 int ino[7]={10,30,40,50,60,70,90 };
 int pre[7]={50,30,10,40,70,60,90};
    Node *root=NULL;
    root=buildTree(ino,pre,7);
    printpre(root);
    
}
