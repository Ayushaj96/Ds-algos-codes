//Recursive
int minDepth(Node *root) {
    // Your code here
   // called on root = NULL 
    if (root == NULL) 
        return 0; 
  
    // Base case : Leaf Node. This accounts for height = 1. 
    if (root->left == NULL && root->right == NULL) 
    return 1; 
  
    // If left subtree is NULL, recur for right subtree 
    int lc = root->left != NULL ? minDepth(root->left) : INT_MAX;
    int rc = root->right != NULL ? minDepth(root->right) : INT_MAX;
    
    return 1 + min(lc,rc);
}


//iterative
int minDepth(Node *root) {
    // Your code here
    if (root == NULL) 
        return 0; 
  
    // Base case : Leaf Node. This accounts for height = 1. 
    if (root->left == NULL && root->right == NULL) 
    return 1; 
  
    queue<pair<Node*,int>> q;
    q.push({root,1});
    
    int nodes = 0;
    pair<Node*,int> p;
    while(!q.empty()){
        nodes = q.size();
        while(nodes--){
            p = q.front();
            q.pop();
            if(p.first->left == NULL && p.first->right == NULL)
                return p.second;
            if(p.first->left != NULL){
                q.push({p.first->left,p.second+1});
            }  
            if(p.first->right != NULL){
                q.push({p.first->right,p.second+1});
            }  
        }
    }
    
    return 0;
}
