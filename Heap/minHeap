#include <iostream>
#include <vector>
using namespace std;


class minHeap{
    vector<int> v;
    
    void heapify(int index){
    
        int lchild = 2*index;
        int rchild = lchild + 1;
        
        int minIndex = index;
        if(lchild < v.size() && v[lchild] < v[index]){
            minIndex = lchild;
        }
        if(rchild < v.size() && v[rchild] < v[minIndex]){
            minIndex = rchild;
        }
        if(minIndex != index){
            swap(v[index], v[minIndex]);
            heapify(minIndex); // recursive call till node is at its correct position
        }
    }
    
    public:
        minHeap(){
            v.push_back(-1); // occupy 0th index
        }
        
        void push(int data){
            v.push_back(data);
            int index = v.size() - 1;
            int parent = index/2;
            
            while(index > 1 && v[parent] > v[index]){
                swap(v[parent], v[index]);
                index = parent;
                parent = parent/2;
            }
        }
        
        int getMin(){
            if(v.size() == 1)
                return -1;
            return v[1];
        }
        
        void pop(){
            if(v.size() == 1)
                return;
            int last = v.size() - 1;
            swap(v[1], v[last]);
            v.pop_back(); // remove last element
            heapify(1);
        }
        
        bool isEmpty(){
            return v.size() == 1;
        }
};

int main() {
	// your code goes here
	int a[] = {1,4,3,2,6,0,10,12};
	int n = sizeof(a)/sizeof(int);
	
	minHeap m;
	for(int i = 0; i < n; i++)
	    m.push(a[i]);
	    
	while(!m.isEmpty()){
	    cout<<m.getMin()<<" ";
	    m.pop();
	}    
	return 0;
}
