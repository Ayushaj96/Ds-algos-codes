int merge(vector<int> &arr, int temp[], int left, int right,int mid){
 
    int i = left, j = mid;
    int k = left;
    int inv_count = 0;
    
    while((i <= mid - 1) && (j <= right)){
        if(arr[i] <= arr[j]){
            temp[k++] = arr[i++];
        }
        else{
            temp[k++] = arr[j++];
            inv_count += (mid - i);
        }
    }
    
    while(i <= mid - 1){
        temp[k++] = arr[i++];
    }
    while(j <= right){
        temp[k++] = arr[j++];
    }
    
    for(int i = left; i <= right; i++)
        arr[i] = temp[i];
    
    return inv_count;
    
} 

int mergeSort(vector<int> &arr, int temp[], int left, int right){
    int inv_count = 0;
    
    if(right > left){
        int mid = left + (right - left)/2;
        
        inv_count += mergeSort(arr,temp,left,mid);
        inv_count += mergeSort(arr,temp,mid+1,right);
        
        inv_count += merge(arr,temp,left,right,mid+1);
    }
    
    return inv_count;
}


int inversionCount(vector<int> v){
    
    int n = v.size();
    int temp[n];
    
    return mergeSort(v,temp,0,n - 1);
}


void inorder(Node *root, vector<int> &v)
{
    if(root==NULL) 
        return;
    
    inorder(root->left,v);
    v.push_back(root->data);
    inorder(root->right,v);
    
}

/*You are required to complete below method */
int pairsViolatingBST(Node *root,int n){
          /*Your code here */
    if(root == NULL)
        return 0;
    vector<int> a;
    inorder(root,a);
    
    return inversionCount(a);
}
